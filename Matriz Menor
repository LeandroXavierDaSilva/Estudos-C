#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    int linhas;
    int colunas;
} TamanhoMatriz;

typedef struct {
    int** dados;
    TamanhoMatriz tamanho;
} Matriz;

Matriz criarMatriz(int linhas, int colunas) {
    Matriz matriz;
    matriz.tamanho.linhas = linhas;
    matriz.tamanho.colunas = colunas;
    matriz.dados = (int**)malloc(linhas * sizeof(int*));

    for (int i = 0; i < linhas; i++) {
        matriz.dados[i] = (int*)malloc(colunas * sizeof(int));
    }

    return matriz;
}

void preencherMatrizAleatoriamente(Matriz* matriz) {
    srand(time(NULL));

    for (int i = 0; i < matriz->tamanho.linhas; i++) {
        for (int j = 0; j < matriz->tamanho.colunas; j++) {
            matriz->dados[i][j] = rand() % 100; // Gera números aleatórios de 0 a 99
        }
    }
}

void imprimirMatriz(Matriz matriz) {
    for (int i = 0; i < matriz.tamanho.linhas; i++) {
        for (int j = 0; j < matriz.tamanho.colunas; j++) {
            printf("%d\t", matriz.dados[i][j]);
        }
        printf("\n");
    }
}

Matriz criarSubmatriz(Matriz matriz, int linhaInicial, int colunaInicial, int sublinhas, int subcolunas) {
    Matriz submatriz = criarMatriz(sublinhas, subcolunas);

    for (int i = 0; i < sublinhas; i++) {
        for (int j = 0; j < subcolunas; j++) {
            submatriz.dados[i][j] = matriz.dados[linhaInicial + i][colunaInicial + j];
        }
    }

    return submatriz;
}

void liberarMatriz(Matriz* matriz) {
    for (int i = 0; i < matriz->tamanho.linhas; i++) {
        free(matriz->dados[i]);
    }
    free(matriz->dados);
}

int main() {
    // Criação da matriz maior
    TamanhoMatriz tamanhoTotal;
    tamanhoTotal.linhas = 5;
    tamanhoTotal.colunas = 5;

    Matriz matrizTotal = criarMatriz(tamanhoTotal.linhas, tamanhoTotal.colunas);
    preencherMatrizAleatoriamente(&matrizTotal);

    printf("Matriz Total:\n");
    imprimirMatriz(matrizTotal);

    // Criação da matriz menor com base na matriz maior
    Matriz submatriz = criarSubmatriz(matrizTotal, 1, 1, 3, 3);

    printf("\nMatriz Sub:\n");
    imprimirMatriz(submatriz);

    // Liberação de memória
    liberarMatriz(&matrizTotal);
    liberarMatriz(&submatriz);

    return 0;
}
